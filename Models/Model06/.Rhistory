#Converting the negative _ratings_ to zero ratings:
dat$rating<-pmax(0,dat$rating)
#__What happens if the testing data has a categorical level that is not in the training data?__
#Linear regression model creates indicator/inary/dummy variables for the levels of a categorical input. These are relative #toa base case.
#You will get an error/warning that says "new levels" if the testing set has categories not in the training set.
#__How should we handle this problem?__
#We could aggregate the categories
dat$time_sig_cat<- character(length= nrow (dat))
dat$time_sig_cat[dat$time_signature==4]<-"Four"
dat$time_sig_cat[dat$time_signature==3]<-"Three"
dat$time_sig_cat[dat$time_signature %in% c(0,1,5)]<-"Other"
model6=lm(rating~ track_minutes+ danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature,data=dat)
pred6=predict(model6,newdata=test)
model6=lm(rating~ track_minutes+ danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature,data=dat)
pred6=predict(model6,newdata=test)
clean_dat <-read.csv("analysisData.csv") # Training set
clean_test <-read.csv("scoringData.csv") # Testing Set
#__What is track_duration__ Miliseconds
#Mutating data to minutes:
dat<- dat%>%mutate(track_minutes=track_duration/(1000*60))
#Converting the negative _ratings_ to zero ratings:
dat$rating<-pmax(0,dat$rating)
#__What happens if the testing data has a categorical level that is not in the training data?__
#Linear regression model creates indicator/inary/dummy variables for the levels of a categorical input. These are relative #toa base case.
#You will get an error/warning that says "new levels" if the testing set has categories not in the training set.
#__How should we handle this problem?__
#We could aggregate the categories
dat$time_sig_cat<- character(length= nrow (dat))
dat$time_sig_cat[dat$time_signature==4]<-"Four"
dat$time_sig_cat[dat$time_signature==3]<-"Three"
dat$time_sig_cat[dat$time_signature %in% c(0,1,5)]<-"Other"
#Mutating data to minutes:
test<- test%>%mutate(track_minutes=track_duration/(1000*60))
#Converting the negative _ratings_ to zero ratings:
#__What happens if the testing data has a categorical level that is not in the training data?__
#Linear regression model creates indicator/inary/dummy variables for the levels of a categorical input. These are relative #toa base case.
#You will get an error/warning that says "new levels" if the testing set has categories not in the training set.
#__How should we handle this problem?__
#We could aggregate the categories
test$time_sig_cat<- character(length= nrow (test))
test$time_sig_cat[test$time_signature==4]<-"Four"
test$time_sig_cat[test$time_signature==3]<-"Three"
test$time_sig_cat[test$time_signature %in% c(0,1,5)]<-"Other"
model6=lm(rating~ track_minutes+ danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature,data=dat)
pred6=predict(model6,newdata=test)
View(submissionFile5[1:20,])
dat <-read.csv("analysisData.csv") # Training set
test <-read.csv("scoringData.csv") # Testing Set
clean_dat <-read.csv("analysisData.csv") # Training set
clean_test <-read.csv("scoringData.csv") # Testing Set
#__What is track_duration__ Miliseconds
#Mutating data to minutes:
dat<- dat%>%mutate(track_minutes=track_duration/(1000*60))
#Converting the negative _ratings_ to zero ratings:
dat$rating<-pmax(0,dat$rating)
#__What happens if the testing data has a categorical level that is not in the training data?__
#Linear regression model creates indicator/inary/dummy variables for the levels of a categorical input. These are relative #toa base case.
#You will get an error/warning that says "new levels" if the testing set has categories not in the training set.
#__How should we handle this problem?__
#We could aggregate the categories
dat$time_sig_cat<- character(length= nrow (dat))
dat$time_sig_cat[dat$time_signature==4]<-"Four"
dat$time_sig_cat[dat$time_signature==3]<-"Three"
dat$time_sig_cat[dat$time_signature %in% c(0,1,5)]<-"Other"
#Mutating data to minutes:
test<- test%>%mutate(track_minutes=track_duration/(1000*60))
#Converting the negative _ratings_ to zero ratings:
#__What happens if the testing data has a categorical level that is not in the training data?__
#Linear regression model creates indicator/inary/dummy variables for the levels of a categorical input. These are relative #toa base case.
#You will get an error/warning that says "new levels" if the testing set has categories not in the training set.
#__How should we handle this problem?__
#We could aggregate the categories
test$time_sig_cat<- character(length= nrow (test))
test$time_sig_cat[test$time_signature==4]<-"Four"
test$time_sig_cat[test$time_signature==3]<-"Three"
test$time_sig_cat[test$time_signature %in% c(0,1,5)]<-"Other"
variables1<- dat[, "track_explicit":"time_sig_cat"]
variables1<- dat[, track_explicit:time_sig_cat]
variables1<- dat[, "track_explicit":"time_sig_cat"]
library(rpart); library(rpart.plot)
tree6 = rpart(track_explicit+key+mode+valence + track_minutes+ danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature,data=dat, method = 'anova')
View(dat)
library(rpart); library(rpart.plot)
tree6 = rpart(key+mode+valence + track_minutes+ danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature,data=dat, method = 'anova')
library(rpart); library(rpart.plot)
tree6 = rpart( danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature+track_explicit+key+mode+valence + track_minutes,data=dat, method = 'anova')
library(rpart); library(rpart.plot)
tree6 = rpart( danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature+track_explicit+key+mode+valence + track_minutes,dat, method = 'anova')
dat <-read.csv("analysisData.csv") # Training set
test <-read.csv("scoringData.csv") # Testing Set
library(rpart); library(rpart.plot)
tree6 = rpart( danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature+track_explicit+key+mode+valence + track_minutes,dat, method = 'anova')
dat <-read.csv("analysisData.csv") # Training set
test <-read.csv("scoringData.csv") # Testing Set
library(rpart); library(rpart.plot)
tree6 = rpart( danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature+track_explicit+key+mode+valence + track_minutes, dat, method = 'anova')
library(rpart); library(rpart.plot)
tree6 = rpart( danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature+track_explicit+key+mode+valence + track_minutes, dat, method = 'anova')
library(rpart); library(rpart.plot)
tree6 = rpart( danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature+track_explicit+key+mode+valence + track_minutes, data=clean_dat, method = 'anova')
#Mutating data to minutes:
test<- test%>%mutate(track_minutes=track_duration/(1000*60))
#Converting the negative _ratings_ to zero ratings:
#__What happens if the testing data has a categorical level that is not in the training data?__
#Linear regression model creates indicator/inary/dummy variables for the levels of a categorical input. These are relative #toa base case.
#You will get an error/warning that says "new levels" if the testing set has categories not in the training set.
#__How should we handle this problem?__
#We could aggregate the categories
test$time_sig_cat<- character(length= nrow (test))
test$time_sig_cat[test$time_signature==4]<-"Four"
test$time_sig_cat[test$time_signature==3]<-"Three"
test$time_sig_cat[test$time_signature %in% c(0,1,5)]<-"Other"
clean_dat <-read.csv("analysisData.csv") # Training set
clean_test <-read.csv("scoringData.csv") # Testing Set
#__What is track_duration__ Miliseconds
#Mutating data to minutes:
dat<- dat%>%mutate(track_minutes=track_duration/(1000*60))
#Converting the negative _ratings_ to zero ratings:
dat$rating<-pmax(0,dat$rating)
#__What happens if the testing data has a categorical level that is not in the training data?__
#Linear regression model creates indicator/inary/dummy variables for the levels of a categorical input. These are relative #toa base case.
#You will get an error/warning that says "new levels" if the testing set has categories not in the training set.
#__How should we handle this problem?__
#We could aggregate the categories
dat$time_sig_cat<- character(length= nrow (dat))
dat$time_sig_cat[dat$time_signature==4]<-"Four"
dat$time_sig_cat[dat$time_signature==3]<-"Three"
dat$time_sig_cat[dat$time_signature %in% c(0,1,5)]<-"Other"
library(rpart); library(rpart.plot)
tree6 = rpart( danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature+track_explicit+key+mode+valence + track_minutes, data=clean_dat, method = 'anova')
dat <-read.csv("analysisData.csv") # Training set
test <-read.csv("scoringData.csv") # Testing Set
clean_dat <-read.csv("analysisData.csv") # Training set
clean_test <-read.csv("scoringData.csv") # Testing Set
#__What is track_duration__ Miliseconds
#Mutating data to minutes:
dat<- dat%>%mutate(track_minutes=track_duration/(1000*60))
#Converting the negative _ratings_ to zero ratings:
dat$rating<-pmax(0,dat$rating)
#__What happens if the testing data has a categorical level that is not in the training data?__
#Linear regression model creates indicator/inary/dummy variables for the levels of a categorical input. These are relative #toa base case.
#You will get an error/warning that says "new levels" if the testing set has categories not in the training set.
#__How should we handle this problem?__
#We could aggregate the categories
dat$time_sig_cat<- character(length= nrow (dat))
dat$time_sig_cat[dat$time_signature==4]<-"Four"
dat$time_sig_cat[dat$time_signature==3]<-"Three"
dat$time_sig_cat[dat$time_signature %in% c(0,1,5)]<-"Other"
#Mutating data to minutes:
test<- test%>%mutate(track_minutes=track_duration/(1000*60))
#Converting the negative _ratings_ to zero ratings:
#__What happens if the testing data has a categorical level that is not in the training data?__
#Linear regression model creates indicator/inary/dummy variables for the levels of a categorical input. These are relative #toa base case.
#You will get an error/warning that says "new levels" if the testing set has categories not in the training set.
#__How should we handle this problem?__
#We could aggregate the categories
test$time_sig_cat<- character(length= nrow (test))
test$time_sig_cat[test$time_signature==4]<-"Four"
test$time_sig_cat[test$time_signature==3]<-"Three"
test$time_sig_cat[test$time_signature %in% c(0,1,5)]<-"Other"
library(rpart); library(rpart.plot)
tree6 = rpart( rating~ danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature+track_explicit+key+mode+valence + track_minutes, data=dat, method = 'anova')
rpart.plot(tree6)
library(rpart); library(rpart.plot)
tree6 = rpart( rating~ danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature+track_explicit+key+mode+valence + track_minutes, data=dat, method = 'anova',
control = rpart.control(minsplit = 100),
control = rpart.control(cp = 0.1)
)
library(rpart); library(rpart.plot)
tree6 = rpart( rating~ danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature+track_explicit+key+mode+valence + track_minutes, data=dat, method = 'anova',
control = rpart.control(cp = 0.001)
)
library(rpart); library(rpart.plot)
tree6 = rpart( rating~ danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature+track_explicit+key+mode+valence + track_minutes, data=dat, method = 'anova',
control = rpart.control(cp = 0.0001)
)
rpart.plot(tree6)
library(rpart); library(rpart.plot)
tree6 = rpart( rating~ danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature+track_explicit+key+mode+valence + track_minutes, data=dat, method = 'anova',
control = rpart.control(cp = 0.001)
)
rpart.plot(tree6)
library(rpart); library(rpart.plot)
tree6 = rpart( rating~ danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature+track_explicit+key+mode+valence + track_minutes, data=dat, method = 'anova',
control = rpart.control(cp = 0.001)
)
rmse6 = sqrt(mean((pred6 - dat$ratings)^2)); rmse6
pred6=predict(tree6,newdata=test)
rmse6 = sqrt(mean((pred6 - dat$ratings)^2)); rmse6
rmse6 = sqrt(mean((pred6 - dat$rating)^2)); rmse6
submissionFile6 = data.frame (id = test$id , rating = pred6)
write.csv( submissionFile6 , 'yosuecanaviri_submission6.csv', row.names =F)
View(submissionFile5[1:20,])
View(submissionFile6[1:20,])
submissionFile6 = data.frame (id = test$id , rating = pred6)
write.csv( submissionFile6 , 'yosuecanaviri_submission6.csv', row.names =F)
tree7 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0001)
)
rmse6 = sqrt(mean((pred6 - dat$rating)^2)); rmse6
pred7=predict(tree7,newdata=test)
pred6=predict(tree6,newdata=test)
rmse6 = sqrt(mean((pred6 - dat$rating)^2)); rmse6
rmse6 = sqrt(mean((pred6 - test$rating)^2)); rmse6
rmse7 = sqrt(mean((pred7 - test$rating)^2)); rmse7
tree7 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0001)
)
rpart.plot(tree7,type=4)
rpart.plot(tree7)
pred7=predict(tree7,newdata=test)
tree7 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0005)
)
rpart.plot(tree7)
tree7 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0007)
)
rpart.plot(tree7)
pred7=predict(tree7,newdata=test)
submissionFile7 = data.frame (id = test$id , rating = pred6)
write.csv( submissionFile7 , 'yosuecanaviri_submission7.csv', row.names =F)
View(submissionFile7[1:20,])
submissionFile7 = data.frame (id = test$id , rating = pred7)
write.csv( submissionFile7 , 'yosuecanaviri_submission7.csv', row.names =F)
View(submissionFile7[1:20,])
rmse7 = sqrt(mean((pred7 - dat$rating)^2)); rmse7
rmse6 = sqrt(mean((pred6 - test$rating)^2)); rmse6
rmse6 = sqrt(mean((pred6 - dat$rating)^2)); rmse6
tree7 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0005)
)
rpart.plot(tree7)
pred7=predict(tree7,newdata=test)
rmse7 = sqrt(mean((pred7 - dat$rating)^2)); rmse7
tree7 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.001)
)
rpart.plot(tree7)
pred7=predict(tree7,newdata=test)
rmse7 = sqrt(mean((pred7 - dat$rating)^2)); rmse7
tree7 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.005)
)
rpart.plot(tree7)
pred7=predict(tree7,newdata=test)
rmse7 = sqrt(mean((pred7 - dat$rating)^2)); rmse7
rmse6 = sqrt(mean((pred6 - dat$rating)^2)); rmse6
tree7 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.008)
)
rpart.plot(tree7)
pred7=predict(tree7,newdata=test)
rmse7 = sqrt(mean((pred7 - dat$rating)^2)); rmse7
tree7 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.01)
)
rpart.plot(tree7)
pred7=predict(tree7,newdata=test)
rmse7 = sqrt(mean((pred7 - dat$rating)^2)); rmse7
tree7 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.03)
)
rpart.plot(tree7)
pred7=predict(tree7,newdata=test)
rmse7 = sqrt(mean((pred7 - dat$rating)^2)); rmse7
tree7 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.01)
)
rpart.plot(tree7)
pred7=predict(tree7,newdata=test)
rmse7 = sqrt(mean((pred7 - dat$rating)^2)); rmse7
submissionFile7 = data.frame (id = test$id , rating = pred7)
write.csv( submissionFile7 , 'yosuecanaviri_submission7.csv', row.names =F)
View(submissionFile7[1:20,])
tree7 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.001)
)
rpart.plot(tree7)
pred7=predict(tree7,newdata=test)
rmse7 = sqrt(mean((pred7 - dat$rating)^2)); rmse7
tree7 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0001)
)
rpart.plot(tree7)
pred7=predict(tree7,newdata=test)
rmse7 = sqrt(mean((pred7 - dat$rating)^2)); rmse7
pred7=predict(tree7,newdata=test)
rmse7 = sqrt(mean((pred7 - dat$rating)^2)); rmse7
View(submissionFile7[1:20,])
tree7 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.001)
)
rpart.plot(tree7)
pred7=predict(tree7,newdata=test)
rmse7 = sqrt(mean((pred7 - dat$rating)^2)); rmse7
submissionFile7 = data.frame (id = test$id , rating = pred7)
write.csv( submissionFile7 , 'yosuecanaviri_submission7.csv', row.names =F)
View(submissionFile7[1:20,])
submissionFile7 = data.frame (id = test$id , rating = pred7)
write.csv( submissionFile7 , 'yosuecanaviri_submission7.csv', row.names =F)
View(submissionFile7[1:20,])
View(submissionFile6[1:20,])
tree7 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0005)
)
rpart.plot(tree7)
pred7=predict(tree7,newdata=test)
rmse7 = sqrt(mean((pred7 - dat$rating)^2)); rmse7
submissionFile7 = data.frame (id = test$id , rating = pred7)
write.csv( submissionFile7 , 'yosuecanaviri_submission7.csv', row.names =F)
submissionFile7 = data.frame (id = test$id , rating = pred7)
write.csv( submissionFile7 , 'yosuecanaviri_submission7.csv', row.names =F)
View(submissionFile7[1:20,])
songs <-read.csv("analysisData.csv")
scoringData <-read.csv("scoringData.csv")
model=lm(rating~track_duration+ danceability + energy + loudness + speechiness + acousticness + instrumentalness +liveness+tempo+time_signature,songs)
pred=predict(model,newdata=scoringData)
model
submissionFile = data.frame (id = scoringData$id , rating = pred)
write.csv( submissionFile , 'yosuecanaviri_submission2.csv', row.names =F)
View(submissionFile[1:20,])
library(tidyverse)
library(dplyr)
dat <-read.csv("analysisData.csv") # Training set
test <-read.csv("scoringData.csv") # Testing Set
clean_dat <-read.csv("analysisData.csv") # Training set
clean_test <-read.csv("scoringData.csv") # Testing Set
#__What is track_duration__ Miliseconds
#Mutating data to minutes:
dat<- dat%>%mutate(track_minutes=track_duration/(1000*60))
#Converting the negative _ratings_ to zero ratings:
dat$rating<-pmax(0,dat$rating)
#__What happens if the testing data has a categorical level that is not in the training data?__
#Linear regression model creates indicator/inary/dummy variables for the levels of a categorical input. These are relative #toa base case.
#You will get an error/warning that says "new levels" if the testing set has categories not in the training set.
#__How should we handle this problem?__
#We could aggregate the categories
dat$time_sig_cat<- character(length= nrow (dat))
dat$time_sig_cat[dat$time_signature==4]<-"Four"
dat$time_sig_cat[dat$time_signature==3]<-"Three"
dat$time_sig_cat[dat$time_signature %in% c(0,1,5)]<-"Other"
#Mutating data to minutes:
test<- test%>%mutate(track_minutes=track_duration/(1000*60))
#Converting the negative _ratings_ to zero ratings:
#__What happens if the testing data has a categorical level that is not in the training data?__
#Linear regression model creates indicator/inary/dummy variables for the levels of a categorical input. These are relative #toa base case.
#You will get an error/warning that says "new levels" if the testing set has categories not in the training set.
#__How should we handle this problem?__
#We could aggregate the categories
test$time_sig_cat<- character(length= nrow (test))
test$time_sig_cat[test$time_signature==4]<-"Four"
test$time_sig_cat[test$time_signature==3]<-"Three"
test$time_sig_cat[test$time_signature %in% c(0,1,5)]<-"Other"
tree8 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0007,minsplit=20,minbucket = round(minsplit/3),maxcompete=4 , maxsurrogate=5,usesurrogate=2 , xval=10, surrogatestyle = 0,maxdepth = 30)
)
library(rpart); library(rpart.plot)
tree8 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0007, minsplit=20,minbucket = round(minsplit/3),maxcompete=4 , maxsurrogate=5,usesurrogate=2 , xval=10, surrogatestyle = 0,maxdepth = 30)
)
tree8 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0007,minbucket = round(minsplit/3),maxcompete=4 , maxsurrogate=5,usesurrogate=2 , xval=10, surrogatestyle = 0,maxdepth = 30)
)
tree8 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0007,maxcompete=4 , maxsurrogate=5,usesurrogate=2 , xval=10, surrogatestyle = 0,maxdepth = 30)
)
tree8 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0007,maxcompete=4 , maxsurrogate=5,usesurrogate=2 , xval=10, surrogatestyle = 0,maxdepth = 30,  minsplit = 22, minbucket = round(minsplit/3))
)
tree8 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0007,maxcompete=4 , maxsurrogate=5,usesurrogate=2 , xval=10, surrogatestyle = 0,maxdepth = 30,  minsplit = 22, minbucket = round(22/3))
)
rpart.plot(tree8)
rmse8 = sqrt(mean((pred8 - test$rating)^2)); rmse8
pred8=predict(tree8,newdata=test)
rmse8 = sqrt(mean((pred8 - test$rating)^2)); rmse8
dat <-read.csv("analysisData.csv") # Training set
test <-read.csv("scoringData.csv") # Testing Set
pred8=predict(tree8,newdata=test)
clean_dat <-read.csv("analysisData.csv") # Training set
clean_test <-read.csv("scoringData.csv") # Testing Set
#__What is track_duration__ Miliseconds
#Mutating data to minutes:
dat<- dat%>%mutate(track_minutes=track_duration/(1000*60))
#Converting the negative _ratings_ to zero ratings:
dat$rating<-pmax(0,dat$rating)
#__What happens if the testing data has a categorical level that is not in the training data?__
#Linear regression model creates indicator/inary/dummy variables for the levels of a categorical input. These are relative #toa base case.
#You will get an error/warning that says "new levels" if the testing set has categories not in the training set.
#__How should we handle this problem?__
#We could aggregate the categories
dat$time_sig_cat<- character(length= nrow (dat))
dat$time_sig_cat[dat$time_signature==4]<-"Four"
dat$time_sig_cat[dat$time_signature==3]<-"Three"
dat$time_sig_cat[dat$time_signature %in% c(0,1,5)]<-"Other"
#Mutating data to minutes:
test<- test%>%mutate(track_minutes=track_duration/(1000*60))
#Converting the negative _ratings_ to zero ratings:
#__What happens if the testing data has a categorical level that is not in the training data?__
#Linear regression model creates indicator/inary/dummy variables for the levels of a categorical input. These are relative #toa base case.
#You will get an error/warning that says "new levels" if the testing set has categories not in the training set.
#__How should we handle this problem?__
#We could aggregate the categories
test$time_sig_cat<- character(length= nrow (test))
test$time_sig_cat[test$time_signature==4]<-"Four"
test$time_sig_cat[test$time_signature==3]<-"Three"
test$time_sig_cat[test$time_signature %in% c(0,1,5)]<-"Other"
library(rpart); library(rpart.plot)
tree8 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0007,maxcompete=4 , maxsurrogate=5,usesurrogate=2 , xval=10, surrogatestyle = 0,maxdepth = 30,  minsplit = 22, minbucket = round(22/3))
)
rpart.plot(tree8)
pred8=predict(tree8,newdata=test)
rmse8 = sqrt(mean((pred8 - test$rating)^2)); rmse8
submissionFile8 = data.frame (id = test$id , rating = pred6)
write.csv( submissionFile8 , 'yosuecanaviri_submission8.csv', row.names =F)
View(submissionFile8[1:20,])
submissionFile8 = data.frame (id = test$id , rating = pred8)
write.csv( submissionFile8 , 'yosuecanaviri_submission8.csv', row.names =F)
View(submissionFile8[1:20,])
rmse8 = sqrt(mean((pred8 - test$rating)^2)); rmse8
rmse8 = sqrt(mean((pred8 - dat$rating)^2)); rmse8
rmse8 = sqrt(mean((pred8 - dat$rating)^2)); rmse8
tree8 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0007,maxcompete=2 , maxsurrogate=5,usesurrogate=2 , xval=10, surrogatestyle = 0,maxdepth = 30,  minsplit = 10, minbucket = round(10/3))
)
rpart.plot(tree8)
pred8=predict(tree8,newdata=test)
rmse8 = sqrt(mean((pred8 - dat$rating)^2)); rmse8
rmse8 = sqrt(mean((pred8 - dat$rating)^2)); rmse8
tree8 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0007,maxcompete=2 , maxsurrogate=10,usesurrogate=2 , xval=10, surrogatestyle = 0,maxdepth = 30,  minsplit = 10, minbucket = round(10/3))
)
rpart.plot(tree8)
pred8=predict(tree8,newdata=test)
rmse8 = sqrt(mean((pred8 - dat$rating)^2)); rmse8
tree8 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0003,maxcompete=2 , maxsurrogate=10,usesurrogate=2 , xval=10, surrogatestyle = 0,maxdepth = 30,  minsplit = 10, minbucket = round(10/3))
)
rpart.plot(tree8)
pred8=predict(tree8,newdata=test)
rmse8 = sqrt(mean((pred8 - dat$rating)^2)); rmse8
rmse8 = sqrt(mean((pred8 - dat$rating)^2)); rmse8
tree8 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0007,maxcompete=2 , maxsurrogate=10,usesurrogate=2 , xval=10, surrogatestyle = 0,maxdepth = 30,  minsplit = 10, minbucket = round(10/3))
)
rmse8 = sqrt(mean((pred8 - dat$rating)^2)); rmse8
tree8 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat, method = 'anova',
control = rpart.control(cp = 0.0007,maxcompete=2 , maxsurrogate=10,usesurrogate=2 , xval=10, surrogatestyle = 0,maxdepth = 30,  minsplit = 10, minbucket = round(10/3))
)
rpart.plot(tree8)
pred8=predict(tree8,newdata=test)
rmse8 = sqrt(mean((pred8 - dat$rating)^2)); rmse8
tree8 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat,
control = rpart.control(cp = 0.0007,maxcompete=2 , maxsurrogate=10,usesurrogate=2 , xval=10, surrogatestyle = 0,maxdepth = 30,  minsplit = 10, minbucket = round(10/3))
)
rpart.plot(tree8)
pred8=predict(tree8,newdata=test)
rmse8 = sqrt(mean((pred8 - dat$rating)^2)); rmse8
rmse8 = sqrt(mean((pred8 - dat$rating)^2)); rmse8
pred8=predict(tree8,newdata=test)
rmse8 = sqrt(mean((pred8 - dat$rating)^2)); rmse8
tree8 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat,
control = rpart.control(cp = 0.0007,maxcompete=2 , maxsurrogate=10,usesurrogate=2 , xval=10, surrogatestyle = 0,maxdepth = 30,  minsplit = 10, minbucket = round(10/3))
)
rpart.plot(tree8)
pred8=predict(tree8,newdata=test)
rmse8 = sqrt(mean((pred8 - dat$rating)^2)); rmse8
tree8 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat,
control = rpart.control(cp = 0.0007,maxcompete=40 , maxsurrogate=10,usesurrogate=2 , xval=10, surrogatestyle = 0,maxdepth = 30,  minsplit = 10, minbucket = round(10/3))
)
rpart.plot(tree8)
pred8=predict(tree8,newdata=test)
rmse8 = sqrt(mean((pred8 - dat$rating)^2)); rmse8
tree8 = rpart( rating~ track_minutes + track_explicit + loudness + acousticness + danceability +
energy + valence , data=dat,
control = rpart.control(cp = 0.0007,maxcompete=40 , maxsurrogate=10,usesurrogate=2 , xval=20, surrogatestyle = 0,maxdepth = 30,  minsplit = 10, minbucket = round(10/3))
)
rpart.plot(tree8)
pred8=predict(tree8,newdata=test)
rmse8 = sqrt(mean((pred8 - dat$rating)^2)); rmse8
